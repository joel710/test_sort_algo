

### üìú Fonction tri_insertion
La fonction `tri_insertion` prend une liste en argument et effectue le tri par insertion sur cette liste. Voici comment cela fonctionne :

- La boucle `for` parcourt chaque √©l√©ment de la liste √† partir du deuxi√®me √©l√©ment (index 1).
- √Ä chaque it√©ration de la boucle, la variable `cle` contient la valeur de l'√©l√©ment actuel √† ins√©rer.
- La boucle `while` recherche la position appropri√©e pour ins√©rer la cl√© dans la partie tri√©e de la liste, en d√©pla√ßant les √©l√©ments plus grands d'une position vers la droite.
- Une fois que la bonne position est trouv√©e, la cl√© est ins√©r√©e √† cet endroit.
- La fonction renvoie la liste tri√©e une fois que toutes les it√©rations sont termin√©es.

‚ÑπÔ∏è **Complexit√©** :
- Cet algorithme a une complexit√© temporelle de \(O(n^2)\) dans le pire des cas et de \(O(n)\) dans le meilleur des cas (lorsque la liste est d√©j√† tri√©e).
- La complexit√© spatiale est de \(O(1)\), car l'algorithme effectue le tri en place sans utiliser d'espace suppl√©mentaire proportionnel √† la taille de la liste.

###################################################################################################################
l'algorithme QuickSort :

### üöÄ Fonction quickSort
La fonction `quickSort` prend une liste en argument et effectue le tri rapide (QuickSort) sur cette liste. Voici comment cela fonctionne :

- Si la longueur de la liste est inf√©rieure √† 2, la fonction renvoie simplement la liste car une liste de 0 ou 1 √©l√©ment est d√©j√† tri√©e.
- Sinon, elle choisit le premier √©l√©ment comme pivot.
- Ensuite, elle partitionne la liste en deux parties : les √©l√©ments inf√©rieurs ou √©gaux au pivot et les √©l√©ments sup√©rieurs au pivot.
- Elle r√©cursivement applique l'algorithme `quickSort` aux deux sous-listes (partie gauche et partie droite).
- Enfin, elle retourne la concat√©nation de la liste tri√©e de gauche, du pivot et de la liste tri√©e de droite.

‚ÑπÔ∏è **Complexit√©** :
- Cet algorithme a une complexit√© temporelle moyenne de \(O(n \log n)\), mais peut atteindre \(O(n^2)\) dans le pire des cas (lorsque le pivot est toujours le plus petit ou le plus grand √©l√©ment).
- La complexit√© spatiale est de \(O(\log n)\) dans le pire des cas pour le maintien de la pile d'appels r√©cursifs.

#### Exemple d'utilisation :
```python
ma_liste = [29, 10, 14, 37, 13]
print("Liste non tri√©e:", ma_liste)
print("Liste tri√©e:", quickSort(ma_liste))
```

Cette sortie affichera la liste non tri√©e suivie de la liste tri√©e √† l'aide de la fonction `quickSort`.
